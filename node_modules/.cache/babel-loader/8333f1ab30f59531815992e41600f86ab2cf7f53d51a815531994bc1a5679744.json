{"ast":null,"code":"// This file will work as a bring data from server and set in redux\n\nimport { productSliceActions } from \"./product-slice\";\nimport { cartSliceActions } from \"./cart-slice\";\nexport const fetchProductData = () => {\n  return async dispatch => {\n    const temp = await fetch(\"http://localhost:8765/api/products.json\");\n    const response = await temp.json();\n    console.log(response);\n    dispatch(productSliceActions.updateProductFromServer(response.data));\n    //when this function will call data will update on where product-slice file  is created through product-reducer\n    //i.e. in Product.js file\n  };\n};\nexport const addProductToCart = (id, price, title) => {\n  return async dispatch => {\n    const cartResponse = await fetch(`http://localhost:8765/api/productsExist.json? id=${id}`);\n    const cartResponseJSON = await cartResponse.json;\n    const respone = await fetch(`http://localhost:8765/api/carts.json`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        total: 1 * price,\n        quantity: 1,\n        product_id: id,\n        price: price\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    });\n    const responseJson = await respone.json();\n    console.log(responseJson);\n    dispatch(cartSliceActions.add({\n      id: responseJson.data.id,\n      title: title,\n      price: price,\n      total: 1 * price,\n      quantity: 1,\n      product: {\n        name: title\n      }\n    }));\n  };\n};","map":{"version":3,"names":["productSliceActions","cartSliceActions","fetchProductData","dispatch","temp","fetch","response","json","console","log","updateProductFromServer","data","addProductToCart","id","price","title","cartResponse","cartResponseJSON","respone","method","body","JSON","stringify","total","quantity","product_id","headers","responseJson","add","product","name"],"sources":["C:/React/demo 16 - Copy/01-starting-project/src/components/store/product-action.js"],"sourcesContent":["// This file will work as a bring data from server and set in redux\r\n\r\nimport { productSliceActions } from \"./product-slice\";\r\nimport { cartSliceActions } from \"./cart-slice\";\r\nexport const fetchProductData = () => {\r\n  return async (dispatch) => {\r\n    const temp = await fetch(\"http://localhost:8765/api/products.json\");\r\n    const response = await temp.json();\r\n    console.log(response);\r\n\r\n    dispatch(productSliceActions.updateProductFromServer(response.data));\r\n    //when this function will call data will update on where product-slice file  is created through product-reducer\r\n    //i.e. in Product.js file\r\n  };\r\n};\r\n\r\nexport const addProductToCart = (id, price, title) => {\r\n  return async (dispatch) => {\r\n    const cartResponse = await fetch(\r\n      `http://localhost:8765/api/productsExist.json? id=${id}`\r\n    );\r\n\r\n    const cartResponseJSON = await cartResponse.json\r\n\r\n    const respone = await fetch(`http://localhost:8765/api/carts.json`, {\r\n      method: \"POST\",\r\n\r\n      body: JSON.stringify({\r\n        total: 1 * price,\r\n        quantity: 1,\r\n        product_id: id,\r\n        price: price,\r\n      }),\r\n\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    });\r\n    const responseJson = await respone.json();\r\n\r\n    console.log(responseJson);\r\n\r\n    dispatch(\r\n      cartSliceActions.add({\r\n        id: responseJson.data.id,\r\n        title: title,\r\n        price: price,\r\n        total: 1 * price,\r\n        quantity: 1,\r\n        product: { name: title },\r\n      })\r\n    );\r\n  };\r\n};\r\n"],"mappings":"AAAA;;AAEA,SAASA,mBAAmB,QAAQ,iBAAiB;AACrD,SAASC,gBAAgB,QAAQ,cAAc;AAC/C,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,yCAAyC,CAAC;IACnE,MAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IAErBH,QAAQ,CAACH,mBAAmB,CAACU,uBAAuB,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACpE;IACA;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,EAAE,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACpD,OAAO,MAAOZ,QAAQ,IAAK;IACzB,MAAMa,YAAY,GAAG,MAAMX,KAAK,CAC7B,oDAAmDQ,EAAG,EACzD,CAAC;IAED,MAAMI,gBAAgB,GAAG,MAAMD,YAAY,CAACT,IAAI;IAEhD,MAAMW,OAAO,GAAG,MAAMb,KAAK,CAAE,sCAAqC,EAAE;MAClEc,MAAM,EAAE,MAAM;MAEdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,CAAC,GAAGT,KAAK;QAChBU,QAAQ,EAAE,CAAC;QACXC,UAAU,EAAEZ,EAAE;QACdC,KAAK,EAAEA;MACT,CAAC,CAAC;MAEFY,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,MAAMC,YAAY,GAAG,MAAMT,OAAO,CAACX,IAAI,CAAC,CAAC;IAEzCC,OAAO,CAACC,GAAG,CAACkB,YAAY,CAAC;IAEzBxB,QAAQ,CACNF,gBAAgB,CAAC2B,GAAG,CAAC;MACnBf,EAAE,EAAEc,YAAY,CAAChB,IAAI,CAACE,EAAE;MACxBE,KAAK,EAAEA,KAAK;MACZD,KAAK,EAAEA,KAAK;MACZS,KAAK,EAAE,CAAC,GAAGT,KAAK;MAChBU,QAAQ,EAAE,CAAC;MACXK,OAAO,EAAE;QAAEC,IAAI,EAAEf;MAAM;IACzB,CAAC,CACH,CAAC;EACH,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}